// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  M
  S
  L
  XL
  XXL
  XXXL
}

enum Gender {
  Men
  Women
  Kid
  Unisex
}

enum Roles {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  //? ... relacion con productos
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  description String
  title       String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // * relacion categoria
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  //* relacion referencias
  imageProduct ImageProduct[]
  OrderItem OrderItem[]

  @@index([gender])
}

model ImageProduct {
  id       Int    @id @default(autoincrement())
  urlImage String

  //* relacion a la tabla de product con su id "productId"
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime? //* -> dato para verificar el email "correo de verificacion o mas"
  password      String
  role          Roles     @default(user)
  image         String?


  //* referencia de relacion de uno a uno con UserAddress model
  address UserAddress?
  Order Order[] //! relacion de uno a muchos "hace referencia"
}

model Countries {
  id   String @id
  name String

  //* Referencias de union de tablas
  UserAddress UserAddress[] //! -> hace la referencia de que tendra alguna reliacion con algun modelo
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  //Relaciones
  country Countries @relation(fields: [countryId], references: [id]) //! hacemos la declaracion de la relacion con el nomnbre del campo "relacion de muchos"
  countryId String

  //! Relacion de muchos a muchos
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}


//! Orden de compras

//* tabla maestra
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  //Referencias a relaicicon entre tablas o modelos
  OrderItem OrderItem[]
  OrderAddress OrderAddress? //* -> en referencias decimos que sera una union de uno a unos cuando quitamos "[]"
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  //Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

//Tener la direccion de entrega para la orden encuestion
model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  //Relaciones
  country   Countries @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}